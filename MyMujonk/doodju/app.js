const URL = "./my_model/"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô path ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

let model, webcam, labelContainer, maxPredictions;
let webcamRunning = false;

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• + ‡∏Å‡∏•‡πâ‡∏≠‡∏á
async function init() {
    if (webcamRunning) return; // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏ã‡πâ‡∏≥

    const modelURL = URL + "model.json";
    const metadataURL = URL + "metadata.json";

    model = await tmImage.load(modelURL, metadataURL);
    maxPredictions = model.getTotalClasses();

    const flip = true;
    webcam = new tmImage.Webcam(500, 500, flip);
    await webcam.setup();
    await webcam.play();
    webcamRunning = true;
    window.requestAnimationFrame(loop);

    document.getElementById("webcam-container").innerHTML = "";
    document.getElementById("webcam-container").appendChild(webcam.canvas);

    labelContainer = document.getElementById("label-container");
    labelContainer.innerHTML = "";
}

// ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏Å‡∏•‡πâ‡∏≠‡∏á
async function loop() {
    if (!webcamRunning) return;
    webcam.update();
    await predict();
    window.requestAnimationFrame(loop);
}

// ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö progress bar
async function predict() {
    const prediction = await model.predict(webcam.canvas);
    labelContainer.innerHTML = "";

    for (let i = 0; i < maxPredictions; i++) {
        const className = prediction[i].className;
        const probability = prediction[i].probability;

        // ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        const predictionContainer = document.createElement("div");
        predictionContainer.className = "progress-bar-container";

        // ‡∏ä‡∏∑‡πà‡∏≠ class
        const label = document.createElement("div");
        label.textContent = className;
        label.style.fontWeight = "bold";
        label.style.marginBottom = "5px";

        // ‡πÅ‡∏ñ‡∏ö progress
        const progressBar = document.createElement("div");
        progressBar.className = "progress-bar";

        const progressBarFill = document.createElement("div");
        progressBarFill.className = "progress-bar-fill";
        progressBarFill.style.width = (probability * 100).toFixed(2) + "%";

        // ‡∏™‡∏µ‡∏ï‡∏≤‡∏° class
        if (className.toLowerCase() === "healthy") {
            progressBarFill.style.backgroundColor = "green";
        } else {
            progressBarFill.style.backgroundColor = "#ff3434";
        }

        progressBar.appendChild(progressBarFill);

        // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° % ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á
        const progressText = document.createElement("div");
        progressText.className = "progress-text";
        progressText.textContent = (probability * 100).toFixed(2) + "%";

        // ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á
        predictionContainer.appendChild(label);
        predictionContainer.appendChild(progressBar);
        predictionContainer.appendChild(progressText);

        labelContainer.appendChild(predictionContainer);
    }
}


function stopWebcam() {
    if (webcam && webcam.webcam && webcam.webcam.srcObject) {
        // ‡∏´‡∏¢‡∏∏‡∏î track ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÉ‡∏ô stream
        webcam.webcam.srcObject.getTracks().forEach(track => track.stop());
        webcamRunning = false;
        document.getElementById("webcam-container").innerHTML = "<p>üì∑ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß</p>";
        labelContainer.innerHTML = "";
    }
}



